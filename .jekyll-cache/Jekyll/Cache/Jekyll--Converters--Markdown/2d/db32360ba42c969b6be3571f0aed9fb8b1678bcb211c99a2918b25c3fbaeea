I"¡ç  <img src="/assets/Blog/SourceTree.png" alt="SCM">
  <div class="image-caption">SCM management</div>

<p>I‚Äôve received some questions over time about how I blog. What platform I use, how I manage dependencies, how I achieve certain effects, how I update, how I handle images etc‚Ä¶</p>

<p>I primarily use <a href="https://www.docker.com">Docker</a>, <a href="https://jekyllrb.com">Jekyll</a>, <a href="https://www.mercurial-scm.org">Mercurial</a> and <a href="https://code.visualstudio.com">Visual Studio Code</a>. Click through to see how I use these things together to create what you‚Äôre reading now.</p>

<!--more-->

<h1 class="no_toc" id="contents">Contents</h1>
<ul id="markdown-toc">
  <li><a href="#overview" id="markdown-toc-overview">Overview</a></li>
  <li><a href="#file-structure" id="markdown-toc-file-structure">File Structure</a></li>
  <li><a href="#jekyll" id="markdown-toc-jekyll">Jekyll</a></li>
  <li><a href="#visual-studio-code" id="markdown-toc-visual-studio-code">Visual Studio Code</a></li>
  <li><a href="#mercurial" id="markdown-toc-mercurial">Mercurial</a>    <ul>
      <li><a href="#setup" id="markdown-toc-setup">Setup</a></li>
      <li><a href="#use" id="markdown-toc-use">Use</a></li>
      <li><a href="#bonus" id="markdown-toc-bonus">Bonus?</a></li>
    </ul>
  </li>
  <li><a href="#imagemagick" id="markdown-toc-imagemagick">Imagemagick</a></li>
  <li><a href="#javascript-abuse" id="markdown-toc-javascript-abuse">Javascript abuse</a>    <ul>
      <li><a href="#video-autoplay" id="markdown-toc-video-autoplay">Video Autoplay</a></li>
      <li><a href="#header-to-outline" id="markdown-toc-header-to-outline">Header to outline.</a></li>
      <li><a href="#admrb" id="markdown-toc-admrb">ADMRB</a></li>
      <li><a href="#admc" id="markdown-toc-admc">ADMC</a></li>
    </ul>
  </li>
  <li><a href="#css-for-images" id="markdown-toc-css-for-images">CSS for images</a></li>
  <li><a href="#opengraph-tags" id="markdown-toc-opengraph-tags">OpenGraph tags</a></li>
  <li><a href="#page-tricks" id="markdown-toc-page-tricks">Page tricks</a>    <ul>
      <li><a href="#jekyll-tagscategories-page" id="markdown-toc-jekyll-tagscategories-page">Jekyll Tags/Categories page</a></li>
      <li><a href="#hidden-posts" id="markdown-toc-hidden-posts">Hidden posts</a></li>
    </ul>
  </li>
  <li><a href="#docker" id="markdown-toc-docker">Docker</a></li>
  <li><a href="#anything-else" id="markdown-toc-anything-else">Anything else?</a></li>
  <li><a href="#support-me" id="markdown-toc-support-me">Support Me!</a></li>
</ul>

<h1 id="overview">Overview</h1>

<p>I write my posts in <a href="https://code.visualstudio.com">Visual Studio Code</a> and the posts are formatted using <a href="https://kramdown.gettalong.org">Kramdown</a> and <a href="http://www.yaml.org">Yaml</a>. I use <a href="https://www.imagemagick.org/script/index.php">ImageMagick</a> to format images while writing.</p>

<p>The blog is generated using <a href="https://jekyllrb.com">Jekyll</a>, which is a flat-site generator. I use Jekyll inside a <a href="https://www.docker.com">Docker</a> container.</p>

<p>When the blog is generated, I upload it to my <a href="https://www.digitalocean.com">Digital Ocean Droplet</a> using <a href="https://www.mercurial-scm.org">Mercurial</a>.</p>

<h1 id="file-structure">File Structure</h1>

  <img src="/assets/Blog/BlogFiles.png" alt="File Structure">
  <div class="image-caption">File Structure of AdmiralBumbleBee.com</div>

<p>File structure is already described <a href="https://jekyllrb.com/docs/structure/">at the jekyll website</a>. The only thing that I do is I categorize photos in the /assets/ directory by the subject.</p>

<p>I store full size images in /assets/subject/. Large images have thumbnails in /assets/subject/thumbnails.</p>

<h1 id="jekyll">Jekyll</h1>

<p><a href="https://jekyllrb.com">Jekyll</a> is where all the fun happens.</p>

<p>Many websites on the web currently accept a request from the client, then generate the page before the data is sent to the user. Jekyll works differently.</p>

<p>Jekyll generates the entire site locally on your computer, then you upload the website to your server. The server serves the site as it was when you created it on your computer.</p>

<p>The workflow is simple and the <a href="https://jekyllrb.com/docs/quickstart/">quick start guide</a> does an excellent job of explaining how to get going. If you have trouble with versions and weird ruby errors, check out the <a href="#docker">Docker</a> section for a way to avoid all that mess.</p>

<ol>
  <li>I use a simple <a href="/programming/2016/04/11/Jekyll-Post-Creating-Script.html">post creation script</a> that creates a post template for me. I also have a similar script for making drafts if I know a post will take me many days/weeks to complete. I just navigate to my blog location and type <code class="highlighter-rouge">./create post name category</code>.</li>
  <li>I run <code class="highlighter-rouge">bundle exec jekyll serve</code> (actually the <a href="#docker">Docker</a> version of this!), and I write my post. I can point my browser to http://127.0.0.1:4000 which is a fully-operational version of my site that updates as I save files.</li>
  <li>When the post is ready I run I run <code class="highlighter-rouge">bundle exec jekyll build</code> (actually the <a href="#docker">Docker</a> version of this!). <strong>This is important</strong>. There‚Äôs a feed.xml file that generates an RSS feed for your website. If you don‚Äôt run build, then your feed.xml will point to 127.0.0.1:4000 rather than your website because that‚Äôs what serve was using!</li>
</ol>

<p>After that I upload the site to my web server using <a href="#mercurial">Mercurial</a>.</p>

<p>I have no special jekyll settings or setup other than using <a href="https://jekyllrb.com/docs/pagination/">pagination</a>.</p>

<h1 id="visual-studio-code">Visual Studio Code</h1>

<p>Writing posts in <a href="https://code.visualstudio.com">Visual Studio Code</a> is pretty straightforward. However I have some snippets I use that make life a bit easier.</p>

<p>First, I suggest that you check the <a href="#css-for-images">CSS for images</a> section to see why I have the double underscored text after the images.</p>

<p>Second, I escaped the above <a href="https://shopify.github.io/liquid/">Liquid Template tags</a> using {% raw %}{% endraw %} around the whole thing. That stops Jekyll from parsing those links.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre>
	"Linked Image": {
		"prefix": "lmg",
		"body": [
			"[![${1:alt-text}](/assets/${2:directory}/Thumbnails/${3:file})](/assets/$2/$3)"
			"__${4:description}__"
		],
		"description": "Image linked to higher-res version"
	},
	"UnLinked Image": {
		"prefix": "img",
		"body": [
			"![${1:alt-text}](/assets/${2:directory}/${3:file})"
			"__${4:description}__"
		],
		"description": "Image standalone"
	},
	"Link": {
		"prefix": "lnk",
		"body": [
			"[${1:word}](${2:url})"
		],
		"description": "Link to Selected Text"
	},
	"Blog Link": {
		"prefix": "snk",
		"body": [
			"[${1:word}]({% post_url ${2:url} %})"
		],
		"description": "Link to Selected Text on Blog"
	},
	"Video": {
		"prefix": "vdj",
		"body": [
			"&lt;video autoplay loop muted class=\"gifvid\"&gt;",
  			"	&lt;source src=\"/assets/${1:url}\" type=\"video/mp4\"&gt;",
  			"	Your browser does not support the video tag.",
			"&lt;/video&gt;"
			"__${2:description}__"
		],
		"description": "Insert Muted Mp4 video"
	},

</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Here‚Äôs what the snippets do:</strong></p>

<ul>
  <li>
    <p><strong>Linked Image</strong> - this inserts an image that is a link to a larger version of the image. It automatically uses the thumbnail image (described in <a href="3imagemagick">ImageMagick</a>) and links to the full-size version.</p>

    <p>Example of what I‚Äôd type: lmg {tab} This is an Image {tab} Directory {tab} imagename.png {tab} description</p>

    <p>Output:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>    
  [![This is an Image](/assets/Directory/Thumbnails/imagename.png)](/assets/Directory/imagename.png)
  __Description__
    
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Unlinked Image</strong> - Just an image.</p>

    <p>Example of what I‚Äôd type: img {tab} This is an Image {tab} Directory {tab} imagename.png {tab} description</p>

    <p>Output:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>    
  ![This is an Image](/assets/Directory/imagename.png)
  __Description__
    
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Link</strong> - Just a link to some other site on the web.</p>

    <p>Example of what I‚Äôd type: lnk {tab} Link to Here {tab} http://www.admiralbumblebee.com</p>

    <p>Output:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>    
  [Link to Here](http://www.admiralbumblebee.com)
    
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Blog Link</strong> - A link to a post on this blog. This requires a special format that uses <a href="https://shopify.github.io/liquid/">Liquid Template tags</a> to create a link to the correct place when generating the post.</p>

    <p>Example of what I‚Äôd type: snk {tab} Link to this Post {tab} 2017-07-15-How-AdmiralBumbleBee-works</p>

    <p>Output:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>    
  [Link to this Post]({% post_url 2017-07-15-How-AdmiralBumbleBee-works %})
    
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>Video</strong> - A link to a video hosted on the blog. This requires some javascript <a href="#video-autoplay">that I explain later</a>.</p>

    <p>Example of what I‚Äôd type: vdj {tab} Directory/video.mp4 {tab} Description</p>

    <p>Output:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>    
  &lt;video autoplay loop muted class-"gifvid"&gt;
      &lt;source src="/assets/Directory/video.mp4" type="video/mp4"&gt;
      Your browser does not support the video tag.
  &lt;/video&gt;
  __Description__
    
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h1 id="mercurial">Mercurial</h1>

  <img src="/assets/Blog/SourceTree.png" alt="SCM">
  <div class="image-caption">SCM management</div>

<p>The idea that you upload your <em>entire website</em> to the server once it‚Äôs generated sounds daunting. It is. So I don‚Äôt do that.</p>

<p>I use what‚Äôs called an <a href="https://en.wikipedia.org/wiki/Software_configuration_management">SCM</a>. Specifically I use <a href="https://www.mercurial-scm.org">Mercurial</a> and <a href="https://www.sourcetreeapp.com">SourceTree</a>.</p>

<p>What mercurial does is tracks changes to files and stores only those changes. Mercurial is running remotely on my web server and locally on my computer.</p>

<p>Since binary files don‚Äôt respond well to simply tracking changes, I use the <a href="https://www.mercurial-scm.org/wiki/LargefilesExtension">largefiles extension</a>. The largefiles extension to mercurial makes limited management of media easier, and I strongly recommend it.</p>

<h2 id="setup">Setup</h2>

<p>I have the remote repository setup in the /var/www/html/ directory on my server. I have the <a href="https://www.mercurial-scm.org/wiki/LargefilesExtension">largefiles extension</a> setup in my .hgrc file inside the web root.</p>

<p>Locally I create a repository in the /BlogRoot/_site directory. _site is where jekyll creates your generated site. You <em>do</em> <em>not</em> want to track the entire blog root locally. All you want to do is track _site directory.</p>

<p>In the local Mercurial repository I setup a ‚Äòremote‚Äô that points to my web server. The remote location looks like this: ssh://user@serverIP:port//var/www/admiralbumblebee.com/. The remote location allows us to <code class="highlighter-rouge">hg push</code> our local changes directly to that repository we setup on the server.</p>

<p>You will need to setup <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">ssh keys</a> for this to work properly, but it shouldn‚Äôt be too difficult.</p>

<p><strong>Important</strong></p>

<p>Mercurial does not show the changes on push unless you add a special update hook. In the .hg/.hgrc file on your remote server (or in .hgrc in your remote user home), you must add these lines:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>[hooks]
changegroup = hg update &gt;&amp;2
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This hook makes HG update the remote directory to reflect the changes after the push. Without the update hook, a local <code class="highlighter-rouge">hg push</code> will do nothing and you‚Äôd have to log in to the server and run <code class="highlighter-rouge">hg update</code> everytime you push.</p>

<p>I did that for a while. It‚Äôs not fun. The hook is better.</p>

<h2 id="use">Use</h2>

<p>When the changes are generated on my computer <a href="#jekyll">using jekyll</a>, I go through the following process to get stuff on my web server:</p>

<ol>
  <li><code class="highlighter-rouge">hg add _site</code> - This tells mercurial that there‚Äôs new files that have been added. We need to track the changes of the new post and any new media we added.</li>
  <li><code class="highlighter-rouge">hg commit</code> - Now the changes are committed as a snapshot. The <em>changes</em> (not the changed files, but the changes themselves) are what gets uploaded to the server when we‚Ä¶</li>
  <li><code class="highlighter-rouge">hg push</code> - This puts the <em>changes</em> on the server.</li>
</ol>

<p>I do this in <a href="https://www.sourcetreeapp.com">SourceTree</a>. Just Commit, check the ‚Äòimmediately push changes to default‚Äô box at the bottom, add a commit message, then commit.</p>

<p>As long as you have the <a href="#setup">update hook</a> in place, then your changes will show immediately and you now have a blog post! (and obviously I have this in place)</p>

<h2 id="bonus">Bonus?</h2>

<p>No bonus. I use branches sometimes, but rarely. I usually use jekyll drafts.</p>

<p>You can obviously use <a href="https://git-scm.com">Git</a> for SCM, but I can‚Äôt stand the names of Git‚Äôs commands. Doing things in Mercurial is almost always simpler and more intuitive without having to remember a bunch of ridiculous syntax and in-jokes.</p>

<h1 id="imagemagick">Imagemagick</h1>

<p>I use <a href="https://www.imagemagick.org/script/index.php">ImageMagick</a> to process my images after categorizing them in <a href="http://www.adobe.com/products/photoshop-lightroom.html">Adobe Lightroom</a></p>

<p>I export my photos from Lightroom to the directory, something like BlogDirectory/assets/PostSubject/. If I don‚Äôt need linked images then there‚Äôs nothing to do. If I want thumbnails with larger images I run this script:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>mkdir Thumbnails ; find * -name '*.jpg' -exec convert '{}' -auto-orient -resize '640x&gt;' -quality 60 Thumbnails/'{}' \;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I installed ImageMagick on macOS using <code class="highlighter-rouge">brew install imagemagick</code>. Simple.</p>

<h1 id="javascript-abuse">Javascript abuse</h1>

<p>The blog has 2 main scripts. One to re-organize the header hierarchy to an outline format, and one to autoplay videos.</p>

<h2 id="video-autoplay">Video Autoplay</h2>

<p>Chrome and Firefox won‚Äôt autoplay videos, and I‚Äôve mostly replaced animated gifs on the blog with muted looping MP4s. So every page has this script to autoplay all the videos that are ‚Äògif replacements‚Äô.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>  <span class="c1">// Autoplay videos in document because firefox/chrome won't autoplay after dom manipulation</span>
  <span class="kd">var</span> <span class="nx">gv</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">"gifvid"</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">gv</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">gv</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">play</span><span class="p">();</span>
  <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The script finds all of the elements with the gifvid class and plays them. Simple.</p>

<h2 id="header-to-outline">Header to outline.</h2>

<p>You‚Äôve probably noticed that each sub-header on the blog has its own colour coded box for easier following of topics. Jekyll has <em>no way to do this</em>. So I wrote a script that re-arranges the DOM.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="k">for</span> <span class="p">(</span><span class="nx">x</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">x</span><span class="o">&lt;</span><span class="mi">7</span><span class="p">;</span><span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="kd">var</span> <span class="nx">h1s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"H"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">);</span>

<span class="c1">// Wrap Hx tags with the appropriate divs for an 'outline' type presentation</span>
<span class="k">for</span> <span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">h1s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">w</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'div'</span><span class="p">);</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">"h"</span>  <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s2">"-style"</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">h1s</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">ns</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>

    <span class="nx">el</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">el</span><span class="p">);</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">el</span><span class="p">);</span>

    <span class="k">while</span> <span class="p">(</span><span class="nx">ns</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">ns</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">!=</span> <span class="s2">"H"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">ns</span><span class="p">.</span><span class="nx">className</span> <span class="o">!=</span> <span class="s2">"h"</span> <span class="o">+</span> <span class="nx">x</span> <span class="o">+</span> <span class="s2">"-style"</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">ns2</span> <span class="o">=</span> <span class="nx">ns</span><span class="p">.</span><span class="nx">nextSibling</span><span class="p">;</span>
    <span class="nx">w</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">ns</span><span class="p">);</span>
    <span class="nx">ns</span> <span class="o">=</span> <span class="nx">ns2</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This script goes through and finds all of the headers, which are written as <code class="highlighter-rouge"># header</code> and <code class="highlighter-rouge">## Header</code> in the markdown, and surrounds them with a div. What constitutes a ‚Äòsection‚Äô is determined from Header to the next header appearance.</p>

<p>And with this script, my blog has an outline format that helps differentiate varying sections.</p>

<h2 id="admrb">ADMRB</h2>

<p>I already discussed <a href="/programming/2017/02/02/Another-new-feature.html">the rating bar</a> on the blog, but just to remind you‚Ä¶ there it is.</p>

<h2 id="admc">ADMC</h2>

<p>The <a href="/programming/2017/01/30/Comparator.html">Comparator!</a> One of my favorite features, and I‚Äôve yet to use it enough.</p>

<h1 id="css-for-images">CSS for images</h1>

<p>In the <a href="#visual-studio-code">visual studio code</a> section I showed how I have descriptions written like <code class="highlighter-rouge">__description__</code> after images. I have similar CSS for video as well. Here is the CSS that turns that into text under the image.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre>p &gt; img + strong {
	margin: 0 auto;
	width: 80%;
	text-align: center;
	display: block;
	font-weight: normal;
	border-bottom: 1px solid grey;
}

p &gt; img + strong :after {
	content: "x";
}

p &gt; a + strong {
	margin: 0 auto;
	width: 80%;
	text-align: center;
	display: block;
	font-weight: normal;
	border-bottom: 1px solid grey;
}

p &gt; a + strong :after {
	content: "x";
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Jekyll turns <code class="highlighter-rouge">__this__</code> into <code class="highlighter-rouge">&lt;b&gt;this&lt;/b&gt;</code>. The CSS takes any bolded text after an image and styles it appropriately so that it appears as an image description.</p>

<h1 id="opengraph-tags">OpenGraph tags</h1>

<p><a href="http://ogp.me">OpenGraph</a> is a way that services like twitter and facebook pull metadata from your website. So this is how you can make jekyll show the correct metadata when linking a blog post on twitter or facebook:</p>

<p>In ‚Äòhead.html‚Äô, between your header tags add this code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="rouge-code"><pre>
&lt;meta content="{{ site.title }}" property="og:site_name"&gt;
  {% if page.title %}
    &lt;meta content="{{ page.title }}" property="og:title"&gt;
  {% else %}
    &lt;meta content="{{ site.title }}" property="og:title"&gt;
  {% endif %}
  {% if page.title %}
    &lt;meta content="article" property="og:type"&gt;
  {% else %}
    &lt;meta content="website" property="og:type"&gt;
  {% endif %}
  {% if page.description %}
    &lt;meta content="{{ page.description }}" property="og:description"&gt;
  {% else %}
    &lt;meta content="{{ site.description }}" property="og:description"&gt;
  {% endif %}
  {% if page.url %}
    &lt;meta content="{{ site.url }}{{ page.url }}" property="og:url"&gt;
  {% endif %}
  {% if page.date %}
    &lt;meta content="{{ page.date | date_to_xmlschema }}" property="article:published_time"&gt;
    &lt;meta content="{{ site.url }}/about/" property="article:author"&gt;
  {% endif %}
  {% if page.image %}
    &lt;meta content="{{ site.url }}/assets/{{ page.image }}" property="og:image"&gt;
  {% else %}
    &lt;meta content="{{ site.url }}/assets/logo.png" property="og:image"&gt;
  {% endif %}
  {% if page.categories %}
    {% for category in page.categories limit:1 %}
    &lt;meta content="{{ category }}" property="article:section"&gt;
    {% endfor %}
  {% endif %}
  {% if page.tags %}
    {% for tag in page.tags %}
    &lt;meta content="{{ tag }}" property="article:tag"&gt;
    {% endfor %}
  {% endif %}

</pre></td></tr></tbody></table></code></pre></div></div>

<p>With this setup you can also add an ‚Äòimage‚Äô and ‚Äòdescription‚Äô property at the top of your post to explicitly give the post a different image or description in the <a href="http://ogp.me">OpenGraph</a> generated link.</p>

<h1 id="page-tricks">Page tricks</h1>

<p>I have some <a href="https://shopify.github.io/liquid/">Liquid Template</a> things on my blog that you may find useful.</p>

<h2 id="jekyll-tagscategories-page">Jekyll Tags/Categories page</h2>

<p>I have a file called ‚Äòtags.md‚Äô in my blog root. Jekyll turns this in to /tags/index.html, and that‚Äôs what you see when you hit the ‚ÄòSite Map‚Äô link at the top of the page.</p>

<p>Here‚Äôs the code to make the tags page:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
</pre></td><td class="rouge-code"><pre>
---
layout: page
title: Site Map
description: Tags!
permalink: /tags/
---
&lt;!-- Get the tag name for every tag on the site and set them
to the `site_tags` variable. --&gt;
{% capture site_tags %}{% for tag in site.tags %}{{ tag | first }}{% unless forloop.last %},{% endunless %}{% endfor %}{% endcapture %}

&lt;!-- `tag_words` is a sorted array of the tag names. --&gt;
{% assign tag_words = site_tags | split:',' | sort %}

&lt;!-- Build the Page --&gt;

&lt;!-- List of all tags --&gt;
&lt;ul class="tags"&gt;
  {% for item in (0..site.tags.size) %}{% unless forloop.last %}
    {% capture this_word %}{{ tag_words[item] }}{% endcapture %}
    &lt;li&gt;
      &lt;a href="#{{ this_word | cgi_escape }}" class="tag"&gt;{{ this_word }}
        &lt;span&gt;({{ site.tags[this_word].size }})&lt;/span&gt;
      &lt;/a&gt;
    &lt;/li&gt;
  {% endunless %}{% endfor %}
&lt;/ul&gt;
&lt;div id="tags-list"&gt;
   &lt;!-- Posts by Tag --&gt;
   &lt;div&gt;
     {% for item in (0..site.tags.size) %}{% unless forloop.last %}
       {% capture this_word %}{{ tag_words[item] }}{% endcapture %}
       &lt;h2 id="{{ this_word | cgi_escape }}"&gt;{{ this_word }}&lt;/h2&gt;
       {% for post in site.tags[this_word] reversed %}{% if post.title != null %}
         &lt;div&gt;
           &lt;span style="float: left;"&gt;
            {{ post.date | date_to_string }} - &lt;a href="{{ post.url }}"&gt;{{ post.title }}&lt;/a&gt;
           &lt;/span&gt;
         &lt;/div&gt;
         &lt;div style="clear: both;"&gt;&lt;/div&gt;
       {% endif %}{% endfor %}
     {% endunless %}{% endfor %}
   &lt;/div&gt;
&lt;/div&gt;

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Hopefully the commens are sufficient, and I‚Äôm pretty sure I ripped off most of this from a number of other blog posts.</p>

<h2 id="hidden-posts">Hidden posts</h2>

<p>In my post at the top I can write <code class="highlighter-rouge">visible: 0</code> in the <a href="https://jekyllrb.com/docs/frontmatter/">front matter</a> to make Jekyll not <em>list</em> that page on the main site. Currently it will still be listed on the Site Map, but you can easily exclude it.</p>

<p>In the blog root, in index.html I have the following code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre>
&lt;ul class="post-list"&gt;
{% for post in paginator.posts %}
    {% if post.visible != 0 %}
        &lt;li&gt;
            &lt;span class="post-meta"&gt;{{ post.date | date: "%c" }}&lt;/span&gt;
            &lt;h2&gt;
            &lt;a class="post-link" href="{{ post.url | prepend: site.baseurl }}"&gt;{{ post.title }}&lt;/a&gt;
            &lt;/h2&gt;
            {% if post.excerpt %}
            {{ post.excerpt }}
        {% endif %}
            {% if post.content contains site.excerpt_separator %}
            &lt;a href="{{ post.url | prepend: site.baseurl }}"&gt;Read more ‚Üí&lt;/a&gt;
            {% endif %}
        &lt;/li&gt;
    {% endif %}
{% endfor %}
&lt;/ul&gt;

</pre></td></tr></tbody></table></code></pre></div></div>

<p>You should be able to see where that code goes, and the only important part is <code class="highlighter-rouge">&amp;#123;% if post.visible != 0 &amp;#125;</code> and the accompanying <code class="highlighter-rouge">&amp;#123;% endif %&amp;#125;</code>. This makes Jekyll not list the post on the front page.</p>

<p>I have similar code in the recent-posts list as well.</p>

<p>If you want you can use this to not list posts from the sitemap and even make an unlisted site map that shows unlisted posts. I may or may not have this‚Ä¶ I don‚Äôt want you looking for it.</p>

<h1 id="docker">Docker</h1>

<p>If you get some weird ruby errors with jekyll, then Docker is the solution for you.</p>

<p>Docker is a way to contain a piece of software in an environment that isn‚Äôt linked to your running operating system. It‚Äôs a way that we can use jekyll, without actually using Jekyll or Ruby on your local system. Docker handles all the dependencies in the container so there‚Äôs no way for you to have issues with your installation of ruby or jekyll or whatever.</p>

<p>Using Docker is actually fairly simple.</p>

<ul>
  <li>Install Docker - Duh.</li>
  <li>Install the Docker for jekyll - run <code class="highlighter-rouge">docker pull jekyll/jekyll</code> in your shell.</li>
</ul>

<p>Now instead of using a <code class="highlighter-rouge">bundle exec jekyll serve</code> or similar, we interact with the jekyll that exists inside docker with <code class="highlighter-rouge">docker run -v $(pwd):/srv/jekyll -p 4000:4000 jekyll/jekyll jekyll serve</code>. Yeah that sucks to type, let‚Äôs break it down:</p>

<ul>
  <li><code class="highlighter-rouge">Docker run </code> - This runs the docker container with the following options.</li>
  <li><code class="highlighter-rouge">-v $(pwd):/srv/jekyll</code> - The Docker jekyll only works inside the docker container. It uses /srv/jekyll inside the docker container to do everything, but we need those things on our hard drive instead. The -v command maps local:container volumes, so we‚Äôre mapping our current directory (<code class="highlighter-rouge">$(pwd)</code>) to the /srv/jekyll directory in the container. Everything that happens in /srv/jekyll will be mapped to the current local directory. This makes it so running the following command is just like doing it locally.</li>
  <li><code class="highlighter-rouge">-p 4000:4000</code> - Just like with the directory, ports inside the container exist only in the container. If we want to run the jekyll webserver in the container, then we need to map the container‚Äôs port 4000 to our local port 4000.</li>
  <li><code class="highlighter-rouge">jekyll/jekyll jekyll serve</code> - This runs the <code class="highlighter-rouge">jekyll serve</code> command from the <code class="highlighter-rouge">jekyll/jekyll</code> container. Docker holds many containers, so we have to address the correct container, then run the command we want.</li>
</ul>

<p>See if you can break down the command to start a new blog in the current directory <code class="highlighter-rouge">docker run -v $(pwd):/srv/jekyll jekyll/jekyll jekyll new .</code>.</p>

<p>It may sound complex, but this is all fairly simple. You can easily setup a <a href="https://shapeshed.com/unix-alias/#how-to-set-an-shell-alias">shell alias</a> for these commands to make it simpler to type. Another option is to write small scripts, and yet another option is to just use your shell history ;)</p>

<h1 id="anything-else">Anything else?</h1>

<p>If I missed anything, or if you have questions about anything in this setup feel free to comment below.</p>

<p>I‚Äôm not going to troubleshoot your problems, but if I can point you in the right direction I will.</p>

<h1 id="support-me">Support Me!</h1>

<p>This post took 3 hours to research, photograph, write and edit. If you appreciate the information presented then <a href="/DonateNow/">please consider joining patreon or donating!</a></p>

<p><a href="https://www.patreon.com/bePatron?u=7465992"> <img class="patreon-button" src="/assets/Patreon.png" alt="Be a Patreon!" /></a></p>

<form style="text-align: center;" action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
<input type="hidden" name="cmd" value="_s-xclick" />
<input type="hidden" name="hosted_button_id" value="BR247JAZBTUJJ" />
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!" />
<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</form>

<p>If you have any questions or comments, please comment below! I read every comment and respond to most.</p>

:ET